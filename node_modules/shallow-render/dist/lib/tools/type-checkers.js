"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.declarationTypes = exports.isClass = exports.isPipeTransform = exports.isTypeProvider = exports.isClassProvider = exports.isFactoryProvider = exports.isExistingProvider = exports.isValueProvider = exports.isModuleWithProviders = void 0;
const reflect_1 = require("./reflect");
function isModuleWithProviders(thing) {
    const key = 'ngModule';
    return typeof thing === 'object' && key in thing;
}
exports.isModuleWithProviders = isModuleWithProviders;
function isValueProvider(provider) {
    const key = 'useValue';
    return typeof provider === 'object' && key in provider;
}
exports.isValueProvider = isValueProvider;
function isExistingProvider(provider) {
    const key = 'useExisting';
    return typeof provider === 'object' && key in provider;
}
exports.isExistingProvider = isExistingProvider;
function isFactoryProvider(provider) {
    const key = 'useFactory';
    return typeof provider === 'object' && key in provider;
}
exports.isFactoryProvider = isFactoryProvider;
function isClassProvider(provider) {
    const key = 'useClass';
    return typeof provider === 'object' && key in provider;
}
exports.isClassProvider = isClassProvider;
function isTypeProvider(provider) {
    return typeof provider === 'function';
}
exports.isTypeProvider = isTypeProvider;
function isPipeTransform(thing) {
    return reflect_1.pipeResolver.isPipe(thing);
}
exports.isPipeTransform = isPipeTransform;
const isClass = (thing) => {
    return typeof thing === 'function';
};
exports.isClass = isClass;
const DECLARATION_TYPES = ['Pipe', 'Component', 'Directive'];
const declarationTypes = (declaration) => reflect_1.jitReflector
    .annotations(declaration)
    .filter(annotation => DECLARATION_TYPES.includes(annotation.ngMetadataName))
    .map(annotation => annotation.ngMetadataName);
exports.declarationTypes = declarationTypes;
//# sourceMappingURL=type-checkers.js.map