"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContainer = exports.ShallowRenderContainer = void 0;
const core_1 = require("@angular/core");
const test_framework_1 = require("../test-frameworks/test-framework");
class ShallowRenderContainer {
}
exports.ShallowRenderContainer = ShallowRenderContainer;
function createContainer(template, bindings) {
    var ProxyShallowContainer_1;
    let ProxyShallowContainer = ProxyShallowContainer_1 = class ProxyShallowContainer extends ShallowRenderContainer {
        constructor() {
            super();
            const spies = spyOnBindings(bindings);
            Object.defineProperties(ProxyShallowContainer_1.prototype, Object.keys(spies).reduce((acc, key) => {
                return Object.assign(Object.assign({}, acc), { [key]: { get: () => spies[key] } });
            }, {}));
        }
    };
    ProxyShallowContainer = ProxyShallowContainer_1 = __decorate([
        core_1.Component({ template }),
        __metadata("design:paramtypes", [])
    ], ProxyShallowContainer);
    return ProxyShallowContainer;
}
exports.createContainer = createContainer;
const spyOnBindings = (bindings) => {
    Object.keys(bindings).forEach(key => {
        if (typeof bindings[key] === 'function' && !test_framework_1.testFramework.isSpy(bindings[key])) {
            test_framework_1.testFramework.spyOn(bindings, key);
        }
    });
    return bindings;
};
//# sourceMappingURL=create-container.js.map