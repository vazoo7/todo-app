import { EventEmitter } from '@angular/core';
import { CustomError } from '../models/custom-error';
export declare type KeysOfType<TObject, TPropertyType> = {
    [K in keyof TObject]: TObject[K] extends TPropertyType ? K : never;
}[keyof TObject];
export declare type PickByType<TObject, TPropertyType> = Pick<TObject, KeysOfType<TObject, TPropertyType>>;
export declare class PropertyNotMarkedAsOutputError extends CustomError {
    constructor(key: string | symbol | number, component: any);
}
export declare class PropertyNotAnEventEmitterError extends CustomError {
    constructor(key: string | symbol | number, component: any);
}
export declare const outputProxy: <TComponent>(component: TComponent) => PickByType<TComponent, EventEmitter<any>>;
